# Nombre del flujo de trabajo que verás en la pestaña "Actions" de GitHub
name: Build and Deploy to VPS

# Define cuándo se debe ejecutar este flujo de trabajo.
# En este caso, cada vez que hagas un "push" a la rama "main".
on:
  push:
    branches: [ "main" ]

# Define los "trabajos" que se van a realizar.
jobs:
  build-and-deploy:
    # Se ejecutará en una máquina virtual de Ubuntu proporcionada por GitHub
    runs-on: ubuntu-latest
    
    # Estos son los pasos que seguirá el trabajo
    steps:
      # 1. Descarga tu código del repositorio a la máquina virtual
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Inicia sesión en Docker Hub usando los secretos que creaste
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 3. Construye tu imagen de Docker y la sube a Docker Hub
      # Etiqueta la imagen con dos "tags": el ID del commit (para unicidad) y "latest" (para la última versión)
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/machu:${{ github.sha }}, ${{ secrets.DOCKERHUB_USERNAME }}/machu:latest

      # 4. Se conecta a tu VPS por SSH y ejecuta los comandos de despliegue la ruta es la del vps no de la PC
      - name: Deploy to VPS
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            cd /home/christian/projects/machupicchuorigin.com/   
            export IMAGE_TAG=${{ github.sha }}
            docker-compose pull
            docker-compose up -d
            docker image prune -af```